"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2978],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),y=a,d=p["".concat(s,".").concat(y)]||p[y]||m[y]||o;return n?r.createElement(d,l(l({ref:t},c),{},{components:n})):r.createElement(d,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=y;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},2351:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:14,keywords:["multi entry","option","column","indexeddb","jsstore"]},l="Multi Entry",i={unversionedId:"multi-entry",id:"multi-entry",title:"Multi Entry",description:"MultiEntry allows you to add indexing on array column.",source:"@site/docs/multi-entry.md",sourceDirName:".",slug:"/multi-entry",permalink:"/docs/multi-entry",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/multi-entry.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14,keywords:["multi entry","option","column","indexeddb","jsstore"]},sidebar:"tutorialSidebar",previous:{title:"Transaction",permalink:"/docs/transaction"},next:{title:"keyPath",permalink:"/docs/keypath"}},s={},u=[],c={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"multi-entry"},"Multi Entry"),(0,a.kt)("p",null,"MultiEntry allows you to add indexing on array column."),(0,a.kt)("p",null,"consider these values in a table"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'var values = [\n    {\n        name: "Ray",\n        tags: ["apple", "banana", "beer"]\n    },\n    {\n        name: "Scott",\n        tags: ["beer"]\n    }, \n    {\n        name: "Marc",\n        tags: ["mongo", "jenkins","jsstore"]\n    }\n];\n')),(0,a.kt)("p",null,"now you want to fetch records whose tags is 'mongo'. So a simple select query will be - "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const results = await connection.select({\n    from: 'people',\n    where: {\n        tags: 'mongo'\n    }\n});\n")),(0,a.kt)("p",null,"Here results will be always empty array, because indexeddb does not know anything about 'mongo' since it has stored an array value."),(0,a.kt)("p",null,"In order to solve this problem - IndexedDb provides an option 'multi entry'."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"MultiEntry lets you search inside a column with array values. MultiEntry creates index for each item in array value.")),(0,a.kt)("p",null,"In this case - you will have to enable ",(0,a.kt)("inlineCode",{parentName:"p"},"multiEntry"),' option for column "tags".'),(0,a.kt)("p",null,"Here is an example database schema -"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"var people = {\n    name: 'people',\n    columns: {\n        name: {\n            unique: true,\n            dataType: JsStore.DATA_TYPE.String\n        },\n        tags: {\n            dataType: JsStore.DATA_TYPE.Array,\n            multiEntry: true\n        }\n    }\n};\n\nvar dataBase = {\n    name: 'MultiEntryTest',\n    tables: [people]\n};\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note :-")," ",(0,a.kt)("inlineCode",{parentName:"p"},"multiEntry")," will only work for plain values i.e string, number but not for compound types like json data or array. Because indexedDb provides one level indexing only."))}m.isMDXComponent=!0}}]);