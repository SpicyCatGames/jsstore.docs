"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4772],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(r),m=o,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||s;return r?n.createElement(f,a(a({ref:t},l),{},{components:r})):n.createElement(f,a({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:o,a[1]=i;for(var u=2;u<s;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8055:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const s={sidebar_position:12,keywords:["import scripts","transaction","query","indexeddb","jsstore"]},a="Intersect",i={unversionedId:"intersect",id:"intersect",title:"Intersect",description:"intersect api combine the result of two or more select query and take only common records between the queries result.",source:"@site/docs/intersect.md",sourceDirName:".",slug:"/intersect",permalink:"/docs/intersect",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intersect.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12,keywords:["import scripts","transaction","query","indexeddb","jsstore"]},sidebar:"tutorialSidebar",previous:{title:"Clear",permalink:"/docs/clear"},next:{title:"Transaction",permalink:"/docs/transaction"}},c={},u=[{value:"Use Case",id:"use-case",level:2}],l={toc:u},p="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"intersect"},"Intersect"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"intersect")," api combine the result of two or more select query and take only common records between the queries result."),(0,o.kt)("h2",{id:"use-case"},"Use Case"),(0,o.kt)("p",null,"There are times when one query is not able to fulfill the situation and so you need to use multiple query but now you are getting duplicate records. ",(0,o.kt)("inlineCode",{parentName:"p"},"intersect")," api is useful in these situation where it combines the results of multiple select query and takes only common records between them."),(0,o.kt)("p",null,"e.g - Consider below queries - "),(0,o.kt)("p",null,"1st query "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"connection.select({\n    from: 'Products',\n    where: {\n        price: {\n            '>': 10\n        }\n    }\n})\n")),(0,o.kt)("p",null,"2nd query "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"connection.select({\n    from: 'Products',\n    where: {\n        price: {\n            '>': 50\n        }\n    }\n})\n")),(0,o.kt)("p",null,"now in the above two queries - results from first query will have some records existing in results of 2nd query."),(0,o.kt)("p",null,"so using ",(0,o.kt)("inlineCode",{parentName:"p"},"intersect")," we can take common results between two results"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"var query1=  {\n    from: 'Products',\n    where: {\n        price: {\n            '>': 10\n        }\n    }\n};\nvar query2 = {\n    from: 'Products',\n    where: {\n        price: {\n            '>': 50\n        }\n    }\n};\nvar results = await connection.intersect({\n    queries:[query1,query2]    \n})\n")),(0,o.kt)("p",{class:"text--center"},(0,o.kt)("a",{class:"button button--info",target:"_blank",href:"https://ujjwalguptaofficial.github.io/idbstudio/?db=Demo&query=var%20query1%20%3D%20%7B%0A%20%20%20%20from%3A%20'Products'%2C%0A%20%20%20%20where%3A%20%7B%0A%20%20%20%20%20%20%20%20price%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20'%3E'%3A%2010%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%3B%0Avar%20query2%20%3D%20%7B%0A%20%20%20%20from%3A%20'Products'%2C%0A%20%20%20%20where%3A%20%7B%0A%20%20%20%20%20%20%20%20price%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20'%3E'%3A%2050%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%3B%0Aintersect(%7B%0A%20%20%20%20queries%3A%20%5Bquery1%2C%20query2%5D%0A%7D)"},"Example")))}d.isMDXComponent=!0}}]);