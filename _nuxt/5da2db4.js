(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{198:function(e,t,n){"use strict";n.r(t);var o={components:{Layout:n(175).a}},r=n(14),component=Object(r.a)(o,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("Layout",{attrs:{title:"Insert",description:"insert data in indexedb",keywords:"insert, api, upsert, indexeddb, jsstore",contentSrc:"/home/runner/work/jsstore.docs/jsstore.docs/content/tutorial/insert/index.md"}},[n("p",[n("code",[e._v("insert")]),e._v(" api is used to insert new records in a table.")]),e._v(" "),n("h3",{attrs:{id:"sql"}},[e._v("Sql")]),e._v(" "),n("pre",[n("code",[e._v("INSERT INTO TABLE_NAME\n(column1, column2, column3,...columnN)\nVALUES\n(value1, value2, value3,...valueN);\n")])]),e._v(" "),n("h3",{attrs:{id:"jsstore"}},[e._v("JsStore")]),e._v(" "),n("pre",[n("code",[e._v("var value = {\n    column1: value1,\n    column2: value2,\n    column3: value3,\n    ...\n    columnN: valueN\n};\n\nvar noOfRowsInserted = await connection.insert({\n    into: \"TABLE_NAME\",\n    values: [Value], //you can insert multiple values at a time\n});\nif (noOfRowsInserted > 0) {\n    alert('Successfully Added');\n}\n")])]),e._v(" "),n("p",[n("br"),n("strong",[e._v("Note :-")]),e._v(" You can also insert data for a column, which you have not defined in db schema. JsStore preserves the NoSql functionality of IndexedDb.")]),e._v(" "),n("p",{staticClass:"margin-top-40px text-center"},[n("a",{staticClass:"btn info",attrs:{target:"_blank",href:"https://ujjwalguptaofficial.github.io/idbstudio/?db=Demo&query=insert(%7B%0A%20%20%20%20into%3A%20%22Customers%22%2C%0A%20%20%20%20values%3A%20%5B%7B%0A%20%20%20%20%20%20%20%20customerName%3A%20'ujjwal%20gupta'%2C%0A%20%20%20%20%20%20%20%20contactName%3A%20'ujjwal'%2C%0A%20%20%20%20%20%20%20%20address%3A%20'bhubaneswar%20odisha'%2C%0A%20%20%20%20%20%20%20%20city%3A%20'bhubaneswar'%2C%0A%20%20%20%20%20%20%20%20postalCode%3A%20'12345'%2C%0A%20%20%20%20%20%20%20%20country%3A%20'India'%0A%20%20%20%20%7D%5D%0A%7D)%3B%0A"}},[e._v("Example")])]),e._v(" "),n("div",{staticClass:"margin-top-30px top-border mb-20px"}),e._v(" "),n("p",[n("strong",[e._v("insert")]),e._v(" api has following options -")]),e._v(" "),n("h4",{attrs:{id:"into"}},[e._v("into")]),e._v(" "),n("p",[e._v("into is used to specify name of table")]),e._v(" "),n("pre",[n("code",[e._v("insert({\n    into:'Products'\n})\n")])]),e._v(" "),n("h4",{attrs:{id:"values"}},[e._v("values")]),e._v(" "),n("p",[e._v("values is used to specify data to insert. It takes array of data.")]),e._v(" "),n("pre",[n("code",[e._v("insert({\n    into:'Products',\n    values:[data1,data2]\n})\n")])]),e._v(" "),n("h4",{attrs:{id:"return"}},[e._v("return")]),e._v(" "),n("p",[e._v("return is a optional & type of boolean field. It is used to get the inserted data. This is useful in case - you want the autoincrement column value.")]),e._v(" "),n("pre",[n("code",[e._v("insert({\n    into:'Products',\n    values:[data1,data2],\n    return: true\n})\n")])]),e._v(" "),n("p",[e._v("Default value of return is false.")]),e._v(" "),n("h4",{attrs:{id:"upsert"}},[e._v("upsert")]),e._v(" "),n("p",[e._v("Update data if exist otherwise insert . Default value is false.")]),e._v(" "),n("p",[n("a",{attrs:{href:"/tutorial/insert/upsert"}},[e._v("Read upsert doc")]),e._v(".")]),e._v(" "),n("h4",{attrs:{id:"validation"}},[e._v("validation")]),e._v(" "),n("p",[e._v("Whether to validate data or not. By default value is true. This can be used to speed up insert query.")]),e._v(" "),n("pre",[n("code",[e._v("insert({\n    into:'Products',\n    values:[data1,data2],\n    validation: false\n})\n")])]),e._v(" "),n("h4",{attrs:{id:"skipdatacheck"}},[e._v("skipDataCheck")]),e._v(" "),n("p",[e._v("Do not check or change anything in data. By default value is false. ")]),e._v(" "),n("p",[e._v("If supplied true, this will directly insert data without checking any thing like datatype, auto increment etc. This is useful in case - where you want to insert huge record at a time.")]),e._v(" "),n("pre",[n("code",[e._v("insert({\n    into:'Products',\n    values:[data1,data2],\n    skipDataCheck: true\n})\n")])]),e._v(" "),n("div",{staticClass:"highlight"},[e._v("\nDifference between validation & skipDataCheck is - validation generates autoIncrement field for autoIncrement column but skipDataCheck do not change anything in data.\n")]),e._v(" "),n("p",[n("br")]),e._v(" "),n("p",[e._v("ðŸ‘‰ Note:- Do not use "),n("code",[e._v("skipDataCheck")]),e._v(" in case you have autoincrement field, otherwise your autoincrement data might not get sync with your inserted data and can create problems.")]),e._v(" "),n("h4",{attrs:{id:"ignore"}},[e._v("ignore")]),e._v(" "),n("p",[e._v("ignore records when error occurs. This is helpful in case when you are recieving some random data from users or any source.")]),e._v(" "),n("p",[e._v("e.g - consider you have 5 rows and 3 of them are not valid. It can be anything like - null value, data type does not match, existing value of primary key etc.")]),e._v(" "),n("p",[e._v("then 2 rows will be inserted & three will be ignored. So in result you will get 2.")]),e._v(" "),n("pre",[n("code",[e._v("insert({\n    into:'Products',\n    values:[datas],\n    ignore: true\n})\n")])]),e._v(" "),n("p",[e._v("By default ignore value is false. So when any error occurs you will get error & whole transaction is aborted.")])])}),[],!1,null,null,null);t.default=component.exports}}]);